---
  AWSTemplateFormatVersion: "2010-09-09"
  
  Description:
    Creates the Lambda functions, DynamoDB table, and API Gateway endpoints for the web application
  
  Parameters:
    UserPoolArn:
      Type: String
      Description: The application's Cognito User Pool ARN
    WebsiteBucket:
      Type: String
      Description: The name for the bucket hosting the website.
  
  Metadata:
    AWS::CloudFormation::Interface:
      ParameterGroups:
        -
          Label:
            default: "Module 1 Details"
          Parameters:
            - WebsiteBucket
        -
          Label:
            default: "Module 2 Details"
          Parameters:
            - UserPoolArn
      ParameterLabels:
        UserPoolArn:
          default: "Cognito User Pool ARN"
        WebsiteBucket:
          default: "Website Bucket Name"
  
  Resources:
    PostsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: Posts
        AttributeDefinitions:
          -
            AttributeName: PostId
            AttributeType: S
        KeySchema:
          -
            AttributeName: PostId
            KeyType: HASH
        ProvisionedThroughput: 
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
  
    CreatePostExecutionRole:
      Type: AWS::IAM::Role
      Properties: 
        RoleName: CreatePostLambda
        AssumeRolePolicyDocument: 
          Version: 2012-10-17
          Statement: 
            - 
              Effect: Allow
              Principal: 
                Service: 
                  - lambda.amazonaws.com
              Action: 
                - "sts:AssumeRole"
        Path: "/posts/"
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        Policies: 
          - 
            PolicyName: PutPostPolicy
            PolicyDocument: 
              Version: 2012-10-17
              Statement: 
                - 
                  Effect: Allow
                  Action: 
                    - dynamodb:PutItem
                    - dynamodb:Scan
                  Resource: !GetAtt PostsTable.Arn
  
    GetPostsExecutionRole:
      Type: AWS::IAM::Role
      Properties: 
        RoleName: GetPostsLambda
        AssumeRolePolicyDocument: 
          Version: 2012-10-17
          Statement: 
            - 
              Effect: Allow
              Principal: 
                Service: 
                  - lambda.amazonaws.com
              Action: 
                  - "sts:AssumeRole"
        Path: "/posts/"
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        Policies: 
          - 
            PolicyName: GetPostsPolicy
            PolicyDocument: 
              Version: 2012-10-17
              Statement: 
                - 
                  Effect: Allow
                  Action: 
                    - dynamodb:GetItem
                    - dynamodb:Scan
                  Resource: !GetAtt PostsTable.Arn
  
    UpdateConfigRole:
      Type: AWS::IAM::Role
      Properties:
  
        Path: /posts/
        AssumeRolePolicyDocument:
          Version: 2012-10-17
          Statement:
            -
              Effect: Allow
              Principal:
                Service: lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          -
            PolicyName: CognitoConfig
            PolicyDocument:
              Version: 2012-10-17
              Statement:
                -
                  Sid: Logging
                  Effect: Allow
                  Action:
                    - "logs:CreateLogGroup"
                    - "logs:CreateLogStream"
                    - "logs:PutLogEvents"
                  Resource: "*"
                -
                  Sid: Cognito
                  Effect: Allow
                  Action:
                    - "cognito-idp:CreateUserPool"
                    - "cognito-idp:DeleteUserPool"
                    - "cognito-idp:CreateUserPoolClient"
                    - "cognito-idp:DeleteUserPoolClient"
                  Resource: "*"
                -
                  Sid: ConfigBucketWriteAccess
                  Effect: Allow
                  Action:
                    - "s3:PutObject"
                    - "s3:PutObjectAcl"
                    - "s3:PutObjectVersionAcl"
                  Resource:
                    - !Sub "arn:aws:s3:::${WebsiteBucket}/*"

    UpdateCognitoConfigFunction:
      Properties:
        Description: Copies objects from a source S3 bucket to a destination
        Handler: index.handler
        Runtime: python2.7
        Role: !GetAtt UpdateConfigRole.Arn
        Timeout: 120
        Code:
          ZipFile: |
            import json
            import boto3
            import cfnresponse
  
            s3 = boto3.resource('s3')
  
            def create(properties, physical_id):
              userPoolId = properties['UserPool']
              clientId = properties['Client']
              region = properties['Region']
              bucket = properties['Bucket']
  
              object = s3.Object(bucket, 'js/config.js')
              config_content = """
            var _config = {
                cognito: {
                    userPoolId: '%s', // e.g. us-east-2_uXboG5pAb
                    userPoolClientId: '%s', // e.g. 25ddkmj4v6hfsfvruhpfi7n4hv
                    region: '%s', // e.g. us-east-2
                },
                api: {
                    invokeUrl: 'Base URL of your API including the stage', // e.g. https://rc7nyt4tql.execute-api.us-west-2.amazonaws.com/prod'
                }
            };
                """
              config_content = config_content % (userPoolId, clientId, region)
              print "Writing config content: %s" % config_content
              print "Writing to bucket: %s" % bucket
              config = s3.Object(bucket,'js/config.js')
              config.put(Body=config_content)
              return cfnresponse.SUCCESS, None
  
            def update(properties, physical_id):
              return create(properties, physical_id)
  
            def delete(properties, physical_id):
              return cfnresponse.SUCCESS, physical_id
  
            def handler(event, context):
              print "Received event: %s" % json.dumps(event)
  
              status = cfnresponse.FAILED
              new_physical_id = None
  
              try:
                properties = event.get('ResourceProperties')
                physical_id = event.get('PhysicalResourceId')
  
                status, new_physical_id = {
                  'Create': create,
                  'Update': update,
                  'Delete': delete
                }.get(event['RequestType'], lambda x, y: (cfnresponse.FAILED, None))(properties, physical_id)
              except Exception as e:
                print "Exception: %s" % e
                status = cfnresponse.FAILED
              finally:
                cfnresponse.send(event, context, status, {}, new_physical_id)
  
      Type: AWS::Lambda::Function
  
    GetPostsFunction:
      Type: AWS::Lambda::Function
      Properties:
        FunctionName: GetPosts
        Runtime: nodejs6.10
        Role: !GetAtt GetPostsExecutionRole.Arn
        Timeout: 5
        MemorySize: 128
        Handler: getPosts.handler
        Code:
          S3Bucket: "messageboard-lambda-functions"
          S3Key: "getPosts.zip"
    
    CreatePostFunction:
      Type: AWS::Lambda::Function
      Properties:
        FunctionName: CreatePost
        Runtime: nodejs6.10
        Role: !GetAtt CreatePostExecutionRole.Arn
        Timeout: 5
        MemorySize: 128
        Handler: createPost.handler
        Code:
          S3Bucket: "messageboard-lambda-functions"
          S3Key: "createPost.zip"
          
  
    MessageBoardApi:
      Type: AWS::ApiGateway::RestApi
      Properties:
        Name: MessageBoardApi
        Body:
          swagger: 2.0
          info:
            version: 1.0.0
            title: MessageBoardApi
          paths:
            /posts:
              get:
                description: Get all posts
                consumes:
                  - application/json
                produces:
                  - application/json
                security: 
                  - CognitoAuthorizer: []
                responses:
                  "200":
                    description: "all posts returned"
                    headers:
                      Access-Control-Allow-Origin:
                        type: "string"
                x-amazon-apigateway-integration:
                  responses:
                    default:
                      statusCode: "200"
                      responseParameters:
                        method.response.header.Access-Control-Allow-Origin: "'*'"
                  uri: 
                    Fn::Join:
                      - ""
                      - - "arn:aws:apigateway:"
                        - !Ref AWS::Region
                        - ":lambda:path/2015-03-31/functions/"
                        - !GetAtt GetPostsFunction.Arn
                        - "/invocations"
                  passthroughBehavior: "when_no_match"
                  httpMethod: "POST"
                  contentHandling: "CONVERT_TO_TEXT"
                  type: "aws_proxy"
              post:
                description: Create a new post
                consumes:
                  - application/json
                produces:
                  - application/json
                security:
                  - CognitoAuthorizer: []
                responses:
                  "200":
                    description: "post created successfully"
                    headers:
                      Access-Control-Allow-Origin:
                        type: "string"
                x-amazon-apigateway-integration:
                  responses:
                    default:
                      statusCode: "200"
                      responseParameters:
                        method.response.header.Access-Control-Allow-Origin: "'*'"
                  uri: 
                    Fn::Join:
                        - ""
                        - - "arn:aws:apigateway:"
                          - !Ref AWS::Region
                          - ":lambda:path/2015-03-31/functions/"
                          - !GetAtt CreatePostFunction.Arn
                          - "/invocations"
                  passthroughBehavior: "when_no_match"
                  httpMethod: "POST"
                  contentHandling: "CONVERT_TO_TEXT"
                  type: "aws_proxy"
              options:
                responses:
                  "200":
                    description: "200 response"
                    schema:
                      $ref: "#/definitions/Empty"
                    headers:
                      Access-Control-Allow-Origin:
                        type: "string"
                      Access-Control-Allow-Methods:
                        type: "string"
                      Access-Control-Allow-Headers:
                        type: "string"
                x-amazon-apigateway-integration:
                  responses:
                    default:
                      statusCode: "200"
                      responseParameters:
                        method.response.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS'"
                        method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
                        method.response.header.Access-Control-Allow-Origin: "'*'"
                  requestTemplates:
                    application/json: "{\"statusCode\": 200}"
                  passthroughBehavior: "when_no_match"
                  type: "mock"
          securityDefinitions:
            CognitoAuthorizer:
              type: "apiKey"
              name: Authorization
              in: header
              x-amazon-apigateway-authtype: cognito_user_pools
              x-amazon-apigateway-authorizer:
                providerARNs:
                  - Fn::Join:
                    - ""
                    - - "arn:aws:cognito-idp:"
                      - !Ref AWS::Region
                      - ":"
                      - !Ref AWS::AccountId
                      - ":userpool/"
                      - !Ref UserPoolArn
                type: "cognito_user_pools"
  
  
  
    MessageBoardApiDeployment:
      Type: AWS::ApiGateway::Deployment
      Properties:
        Description: Prod deployment for message board API
        RestApiId: !Ref MessageBoardApi
        StageName: prod         
  
    MessageBoardApiPostFunctionPermissions:
      Type: AWS::Lambda::Permission
      Properties:
        Action: lambda:InvokeFunction
        FunctionName: !Ref CreatePostFunction
        Principal: apigateway.amazonaws.com
        SourceArn:
          Fn::Join:
            - ""
            - - "arn:aws:execute-api:"
              - !Ref AWS::Region
              - ":"
              - !Ref AWS::AccountId
              - ":"
              - !Ref MessageBoardApi
              - "/*/posts"
              
    MessageBoardApiGetFunctionPermissions:
      Type: AWS::Lambda::Permission
      Properties:
        Action: lambda:InvokeFunction
        FunctionName: !Ref GetPostsFunction
        Principal: apigateway.amazonaws.com
        SourceArn:
          Fn::Join:
            - ""
            - - "arn:aws:execute-api:"
              - !Ref AWS::Region
              - ":"
              - !Ref AWS::AccountId
              - ":"
              - !Ref MessageBoardApi
              - "/*"
  
    UpdateApiConfig:
      Type: "Custom::ApiConfigFile"
      Properties:
        ServiceToken: !GetAtt UpdateApiConfigFunction.Arn
        Bucket: !Ref WebsiteBucket
        InvokeUrl:
          Fn::Join:
            - ""
            - - "https://"
              - !Ref MessageBoardApi
              - ".execute-api."
              - !Ref AWS::Region
              - ".amazonaws.com/prod"
   
    UpdateApiConfigFunction:
      Type: AWS::Lambda::Function
      DependsOn: UpdateCognitoConfigFunction
      Properties:
        Description: Adds the API endpoint to the config.js file
        Handler: index.handler
        Runtime: python2.7
        Role: !GetAtt UpdateConfigRole.Arn
        Timeout: 120
        Code:
          ZipFile: |
            import json
            import boto3
            import cfnresponse
  
            s3 = boto3.resource('s3')
  
            def create(properties, physical_id):
              bucket = properties['Bucket']
              config_object = s3.Object(bucket, 'js/config.js').get()
              config_data = config_object["Body"].read()
              print "Current config: %s" % config_data
              config_data = config_data.replace("Base URL of your API including the stage", properties["InvokeUrl"])
              print "Modified config: %s" % config_data
              config = s3.Object(bucket,'js/config.js')
              config.put(Body=config_data)
              return cfnresponse.SUCCESS, None
  
            def update(properties, physical_id):
              return create(properties, physical_id)
  
            def delete(properties, physical_id):
              return cfnresponse.SUCCESS, physical_id
  
            def handler(event, context):
              print "Received event: %s" % json.dumps(event)
  
              status = cfnresponse.FAILED
              new_physical_id = None
  
              try:
                properties = event.get('ResourceProperties')
                physical_id = event.get('PhysicalResourceId')
  
                status, new_physical_id = {
                  'Create': create,
                  'Update': update,
                  'Delete': delete
                }.get(event['RequestType'], lambda x, y: (cfnresponse.FAILED, None))(properties, physical_id)
              except Exception as e:
                print "Exception: %s" % e
                status = cfnresponse.FAILED
              finally:
                cfnresponse.send(event, context, status, {}, new_physical_id)
  
  Outputs:
    MessageBoardApiInvokeUrl:
      Description: URL for the deployed message board API
      Value:
        Fn::Join:
          - ""
          - - "https://"
            - !Ref MessageBoardApi
            - ".execute-api."
            - !Ref AWS::Region
            - ".amazonaws.com/prod"
      Export:
        Name: MessageBoardApiUrl